name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has-src-changes: ${{ steps.check.outputs.has-src-changes }}
      has-test-changes: ${{ steps.check.outputs.has-test-changes }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for source and test changes
      id: check
      run: |
        # Get list of changed files
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
        
        # Check for source changes
        if echo "$CHANGED_FILES" | grep -E '^src/.*\.ts$' | grep -v '\.test\.ts$'; then
          echo "has-src-changes=true" >> $GITHUB_OUTPUT
        else
          echo "has-src-changes=false" >> $GITHUB_OUTPUT
        fi
        
        # Check for test changes
        if echo "$CHANGED_FILES" | grep -E '\.test\.ts$'; then
          echo "has-test-changes=true" >> $GITHUB_OUTPUT
        else
          echo "has-test-changes=false" >> $GITHUB_OUTPUT
        fi

  require-tests:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.has-src-changes == 'true' && needs.check-changes.outputs.has-test-changes == 'false'
    
    steps:
    - name: Fail if source changes without tests
      run: |
        echo "‚ùå Source files were modified without corresponding test changes."
        echo "Please add or update tests for your changes."
        exit 1

  size-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Check bundle size
      run: |
        # Check the size of the built files
        DIST_SIZE=$(du -sh dist | cut -f1)
        echo "üì¶ Distribution size: $DIST_SIZE"
        
        # Fail if dist is over 10MB
        DIST_SIZE_BYTES=$(du -sb dist | cut -f1)
        if [ $DIST_SIZE_BYTES -gt 10485760 ]; then
          echo "‚ùå Distribution size exceeds 10MB limit"
          exit 1
        fi

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Check for known vulnerabilities
      run: |
        npm audit --json > audit.json || true
        if [ -s audit.json ]; then
          VULNS=$(cat audit.json | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' 2>/dev/null || echo "0")
          if [ "$VULNS" != "0" ] && [ "$VULNS" != "" ]; then
            echo "‚ùå Found $VULNS high/critical vulnerabilities"
            npm audit
            exit 1
          fi
        fi

  test-coverage:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run test coverage
      run: npm run test:coverage
    
    - name: Check coverage thresholds
      run: |
        # Extract coverage percentages from the coverage summary
        COVERAGE_FILE="coverage/coverage-summary.json"
        if [ -f "$COVERAGE_FILE" ]; then
          STATEMENTS=$(cat $COVERAGE_FILE | jq '.total.statements.pct')
          BRANCHES=$(cat $COVERAGE_FILE | jq '.total.branches.pct')
          FUNCTIONS=$(cat $COVERAGE_FILE | jq '.total.functions.pct')
          LINES=$(cat $COVERAGE_FILE | jq '.total.lines.pct')
          
          echo "üìä Coverage Report:"
          echo "  Statements: ${STATEMENTS}%"
          echo "  Branches: ${BRANCHES}%"
          echo "  Functions: ${FUNCTIONS}%"
          echo "  Lines: ${LINES}%"
          
          # Fail if coverage is below thresholds
          MIN_COVERAGE=70
          if (( $(echo "$STATEMENTS < $MIN_COVERAGE" | bc -l) )) || \
             (( $(echo "$BRANCHES < $MIN_COVERAGE" | bc -l) )) || \
             (( $(echo "$FUNCTIONS < $MIN_COVERAGE" | bc -l) )) || \
             (( $(echo "$LINES < $MIN_COVERAGE" | bc -l) )); then
            echo "‚ùå Coverage is below ${MIN_COVERAGE}% threshold"
            exit 1
          fi
        fi
    
    - name: Post coverage comment
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          const coverageFile = 'coverage/coverage-summary.json';
          
          if (fs.existsSync(coverageFile)) {
            const coverage = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
            const total = coverage.total;
            
            const comment = `## üìä Test Coverage Report
            
            | Type | Coverage | Details |
            |------|----------|---------|
            | Statements | ${total.statements.pct}% | ${total.statements.covered}/${total.statements.total} |
            | Branches | ${total.branches.pct}% | ${total.branches.covered}/${total.branches.total} |
            | Functions | ${total.functions.pct}% | ${total.functions.covered}/${total.functions.total} |
            | Lines | ${total.lines.pct}% | ${total.lines.covered}/${total.lines.total} |
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }